# Loads a dynamic module.
load_module modules/ngx_http_brotli_filter_module.so;
load_module modules/ngx_http_brotli_static_module.so;
load_module modules/ngx_http_headers_more_filter_module.so;

# Defines user and group credentials used by worker processes. If group is omitted, a group whose name equals
# that of user is used.
# Default: user nobody nobody;
user www-data;

# Defines a file that will store the process ID of the main process.
# Default: pid logs/nginx.pid;
pid /run/nginx.pid;

# Defines the number of worker processes.
# Default: worker_processes 1;
worker_processes auto;

# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes. Used to
# increase the limit without restarting the main process.
worker_rlimit_nofile 100000;

# Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    # Default: worker_connections 512;
    worker_connections 4096;

    #  If multi_accept is disabled, a worker process will accept one new connection at a time. Otherwise, a worker
    # process will accept all new connections at a time.
    # Default: multi_accept off;
    multi_accept on;

    # Specifies the connection processing method to use. There is normally no need to specify it explicitly, because
    # nginx will by default use the most efficient method.
    use epoll;
    epoll_events 512;
}

# Provides the configuration file context in which the HTTP server directives are specified.
http {
    # Adds the specified charset to the “Content-Type” response header field. If this charset is different from the
    # charset specified in the source_charset directive, a conversion is performed.
    # Default: charset off;
    charset utf-8;

    # Enables module processing in responses with the specified MIME types in addition to “text/html”. The special
    # value “*” matches any MIME type (0.8.29).
    # Default: charset_types text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml;
    charset_types text/css text/javascript text/plain text/xml application/atom+xml;

    # Enables or disables the use of sendfile().
    # Default: sendfile off;
    sendfile on;

    # Limits the amount of data that can be transferred in a single sendfile() call. Without the limit, one fast
    # connection may seize the worker process entirely.
    # Default: sendfile_max_chunk 2m;
    sendfile_max_chunk 512k;

    # Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket option on Linux.
    # Default: tcp_nopush off;
    tcp_nopush on;

    # Enables or disables the use of the TCP_NODELAY option. The option is enabled when a connection is transitioned
    # into the keep-alive state. Additionally, it is enabled on SSL connections, for unbuffered proxying, and for
    # WebSocket proxying.
    # Default: tcp_nopush off;
    tcp_nodelay on;

    # The first parameter sets a timeout during which a keep-alive client connection will stay open on the server side.
    # Default: keepalive_timeout 75s;
    keepalive_timeout 3m;

    # Sets the maximum number of requests that can be served through one keep-alive connection. After the
    # maximum number of requests are made, the connection is closed.
    # Default: keepalive_requests 1000;
    keepalive_requests 100000;

    # Enables or disables emitting nginx version on error pages and in the “Server” response header field.
    # Default: server_tokens on;
    server_tokens off;

    # Enables or disables adding comments to responses for MSIE clients with status greater than 400 to increase
    # the response size to 512 bytes.
    # Default: msie_padding on;
    msie_padding off;

    # Enables or disables logging of errors about not found files into error_log.
    # Default: log_not_found on;
    log_not_found off;

    # Sets the maximum size of the types hash tables.
    # Default: types_hash_max_size 1024;
    types_hash_max_size 2048;

    # Sets the bucket size for the types hash tables.
    # Default: types_hash_bucket_size 64;
    types_hash_bucket_size 64;

    # Sets the maximum allowed size of the client request body.
    # Default: client_max_body_size 1m;
    client_max_body_size 512M;

    # Sets buffer size for reading client request body.
    # Default: client_body_buffer_size 8k|16k;
    client_body_buffer_size 512k;

    # Determines whether nginx should save the entire client request body in a single buffer. The directive is
    # recommended when using the $request_body variable, to save the number of copy operations involved.
    # Default: client_body_in_single_buffer off;
    client_body_in_single_buffer on;

    # Sets buffer size for reading client request header. For most requests, a buffer of 1K bytes is enough. However,
    # if a request includes long cookies, or comes from a WAP client, it may not fit into 1K. If a request line or a
    # request header field does not fit into this buffer then larger buffers, configured by the 
    # large_client_header_buffers directive, are allocated.
    # Default: client_header_buffer_size 1k;
    client_header_buffer_size 3m;

    # Sets the maximum number and size of buffers used for reading large client request header.
    # Default: large_client_header_buffers 4 8k;
    large_client_header_buffers 4 256k;

    # Sets the size of the per worker input buffer.
    # Default: http2_recv_buffer_size 256k;
    http2_recv_buffer_size 128k;

    # Defines a timeout for reading client request body.
    # Default: client_body_timeout 60s;
    client_body_timeout 3m;

    # Defines a timeout for reading client request header.
    # Default: client_header_timeout 60s;
    client_header_timeout 3m;

    # Sets a timeout for transmitting a response to the client.
    # Default: send_timeout 60s;
    send_timeout 60s;

    # Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout
    # cannot usually exceed 75 seconds.
    # Default: proxy_connect_timeout 60s;
    proxy_connect_timeout 60s;

    # Defines a timeout for reading a response from the proxied server.
    # Default: proxy_read_timeout 60s;
    proxy_read_timeout 60s;

    # Sets a timeout for transmitting a request to the proxied server.
    # Default: proxy_send_timeout 60s;
    proxy_send_timeout 60s;

    # By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-...” from the response
    # of a proxied server to a client. The proxy_hide_header directive sets additional fields that will not be passed. If,
    # on the contrary, the passing of fields needs to be permitted, the proxy_pass_header directive can be used.
    proxy_hide_header Referrer-Policy;
    proxy_hide_header X-Content-Type-Options;
    proxy_hide_header X-Frame-Options;
    proxy_hide_header X-Robots-Tag;
    proxy_hide_header X-XSS-Protection;

    # Sets the maximum number of concurrent HTTP/2 streams in a connection.
    # Default: http2_max_concurrent_streams 128;
    http2_max_concurrent_streams 32;

    # Sets the status code to return in response to rejected requests.
    # Default: limit_conn_status 503;
    limit_conn_status 429;

    # Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state
    # includes the current number of connections. The key can contain text, variables, and their combination.
    # Requests with an empty key value are not accounted.
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # Sets the status code to return in response to rejected requests.
    # Default: limit_req_status 503;
    limit_req_status 429;

    # Sets parameters for a shared memory zone that will keep states for various keys. In particular, the state stores
    # the current number of excessive requests. The key can contain text, variables, and their combination. Requests
    # with an empty key value are not accounted.
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

    # Enables or disables resetting timed out connections and connections closed with the non-standard code 444
    # (1.15.2). The reset is performed as follows. Before closing a socket, the SO_LINGER option is set on it with a
    # timeout value of 0. When the socket is closed, TCP RST is sent to the client, and all memory occupied by this
    # socket is released. This helps avoid keeping an already closed socket with filled buffers in a FIN_WAIT1 state for a long time.
    reset_timedout_connection on;

    # Sets the bucket size for the server names hash tables. The default value depends on the size of the processor’s cache line.
    # Default: server_names_hash_bucket_size 32|64|128;
    server_names_hash_bucket_size 128;

    # Sets the number and size of the buffers used for reading a response from the FastCGI server, for a single
    # connection. By default, the buffer size is equal to one memory page. This is either 4K or 8K, depending on a platform.
    # Default: fastcgi_buffers 8 4k|8k;
    fastcgi_buffers 8 16k;

    # Defines a timeout for establishing a connection with a FastCGI server. It should be noted that this timeout
    # cannot usually exceed 75 seconds.
    # Default: fastcgi_connect_timeout 60s;
    fastcgi_connect_timeout 60s;

    # Defines a timeout for reading a response from the FastCGI server. The timeout is set only between two
    # successive read operations, not for the transmission of the whole response. If the FastCGI server does not
    # transmit anything within this time, the connection is closed.
    # Default: fastcgi_read_timeout 60s;
    fastcgi_read_timeout 60s;

    # Sets a timeout for transmitting a request to the FastCGI server. The timeout is set only between two
    # successive write operations, not for the transmission of the whole request. If the FastCGI server does not
    # receive anything within this time, the connection is closed.
    # Default: fastcgi_send_timeout 60s;
    fastcgi_send_timeout 60s;

    # By default, nginx does not pass the header fields “Status” and “X-Accel-...” from the response of a FastCGI
    # server to a client. The fastcgi_hide_header directive sets additional fields that will not be passed. If, on the
    # contrary, the passing of fields needs to be permitted, the fastcgi_pass_header directive can be used.
    fastcgi_hide_header X-Powered-By;
    fastcgi_hide_header Referrer-Policy;
    fastcgi_hide_header X-Content-Type-Options;
    fastcgi_hide_header X-Frame-Options;
    fastcgi_hide_header X-Robots-Tag;
    fastcgi_hide_header X-XSS-Protection;

    # Configures a cache that can store: open file descriptors, their sizes and modification times;
    # information on existence of directories; file lookup errors, such as “file not found”, “no read permission”, and so on.
    # Default: open_file_cache off;
    open_file_cache max=200000 inactive=20s;

    # Sets a time after which open_file_cache elements should be validated.
    # Default: open_file_cache_valid 60s;
    open_file_cache_valid 30s;

    # Sets the minimum number of file accesses during the period configured by the inactive parameter of the
    # open_file_cache directive, required for a file descriptor to remain open in the cache.
    # Default: open_file_cache_min_uses 1;
    open_file_cache_min_uses 2;

    # Enables or disables caching of file lookup errors by open_file_cache.
    # Default: open_file_cache_errors off;
    open_file_cache_errors on;

    # Defines the default MIME type of a response. Mapping of file name extensions to MIME types can be set with the types directive.
    # Default: default_type text/plain;
    default_type application/octet-stream;

    # Specifies log format.
    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request_method $scheme://$host$request_uri $server_protocol" "$status $body_bytes_sent $request_id" '
                    '"$http_referer" "$http_user_agent"';

    # Sets the path, format, and configuration for a buffered log write.
    # Default: access_log logs/access.log combined;
    access_log /var/log/nginx/access.log main buffer=64k flush=1m;
    # Default: error_log logs/error.log crit;
    error_log /var/log/nginx/error.log crit;

    # Specifies a time during which a client may reuse the session parameters.
    # Default: ssl_session_timeout 5m;
    ssl_session_timeout 1d;

    # Enables or disables session resumption through TLS session tickets.
    # Default: ssl_session_tickets on;
    ssl_session_tickets off;

    # Sets the size of the buffer used for sending data.
    # Default: ssl_buffer_size 16k;
    ssl_buffer_size 4k;

    # Enables the specified protocols.
    # Default: ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_protocols TLSv1.3;

    # Enables verification of client certificates. The verification result is stored in the $ssl_client_verify variable.
    # Default: ssl_verify_client off;
    ssl_verify_client off;

    # Sets the verification depth in the client certificates chain.
    # Default: ssl_verify_depth 1;
    ssl_verify_depth 1;

    # Specifies that server ciphers should be preferred over client ciphers when using the SSLv3 and TLS protocols.
    # Default: ssl_prefer_server_ciphers off;
    ssl_prefer_server_ciphers off;

    # Enables or disables stapling of OCSP responses by the server.
    # Default: ssl_stapling off;
    ssl_stapling off;

    # Enables or disables verification of OCSP responses by the server.
    # Default: ssl_stapling_verify off;
    ssl_stapling_verify off;

    # Specifies how to compare modification time of a response with the time in the “If-Modified-Since” request header field.
    # Default: if_modified_since exact;
    if_modified_since before;

    # Enables or disables the use of asynchronous file I/O (AIO) on FreeBSD and Linux.
    # Default: aio off;
    aio threads;

    # If aio is enabled, specifies whether it is used for writing files. Currently, this only works when using aio threads
    # and is limited to writing temporary files with data received from proxied servers.
    # Default: aio_write off;
    aio_write on;

    # Includes another file, or files matching the specified mask, into configuration. Included files should consist of
    # syntactically correct directives and blocks.
    include mime.types;
    include snippets/gzip.conf;
    include snippets/brotli.conf;
    include /etc/nginx/http/*.conf;
    # include /etc/nginx/modules-enabled/*.conf;

    # Defines trusted addresses that are known to send correct replacement addresses. If the special value unix: is
    # specified, all UNIX-domain sockets will be trusted. Trusted addresses may also be specified using a hostname (1.13.1).
    set_real_ip_from 0.0.0.0/0;
    set_real_ip_from ::/0;

    # Defines the request header field whose value will be used to replace the client address.
    # Default: real_ip_header X-Real-IP;
    real_ip_header X-Forwarded-For;

    # Defines the URI that will be shown for the specified errors. A uri value can contain variables.
    error_page 400 /error/400.html;
    error_page 401 /error/401.html;
    error_page 402 /error/402.html;
    error_page 403 /error/403.html;
    error_page 404 /error/404.html;
    error_page 405 /error/405.html;
    error_page 406 /error/406.html;
    error_page 407 /error/407.html;
    error_page 408 /error/408.html;
    error_page 409 /error/409.html;
    error_page 410 /error/410.html;
    error_page 411 /error/411.html;
    error_page 412 /error/412.html;
    error_page 413 /error/413.html;
    error_page 414 /error/414.html;
    error_page 415 /error/415.html;
    error_page 416 /error/416.html;
    error_page 417 /error/417.html;
    error_page 418 /error/418.html;
    error_page 421 /error/421.html;
    error_page 422 /error/422.html;
    error_page 423 /error/423.html;
    error_page 424 /error/424.html;
    error_page 425 /error/425.html;
    error_page 426 /error/426.html;
    error_page 428 /error/428.html;
    error_page 429 /error/429.html;
    error_page 431 /error/431.html;
    error_page 451 /error/451.html;
    error_page 500 /error/500.html;
    error_page 501 /error/501.html;
    error_page 502 /error/502.html;
    error_page 503 /error/503.html;
    error_page 504 /error/504.html;
    error_page 505 /error/505.html;
    error_page 506 /error/506.html;
    error_page 507 /error/507.html;
    error_page 508 /error/508.html;
    error_page 510 /error/510.html;
    error_page 511 /error/511.html;
}
